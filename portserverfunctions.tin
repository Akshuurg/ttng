#map read bundles/TTMap/map.map;
#read bundles/TTMapEditor/data.tin;
#map goto 1;
#map at {1} {#map get roomdata MapStampValue};

#nop ACCEPT NEW CONNECTIONS;
#action {<PORT> New connection: %* D%d.} {
	#list userList add {%2};
	#var userDetails[%2][host] {%1};
	serverinfo %2;

#nop SEND DYNAMICS;
	#delay {5} {
    		refresh_dynamics;
    		refresh_beacons;
	};
#nop wyslij checksum;   
    #map at {1} {#map get roomdata vrd};
    #port send %2 CHECKSUM $vrd;
};

#action {<PORT> Closing connection to %* D%d.} {
	#list userList find %2 ulfv;
	#list userList del $ulfv;
};

#alias {broadcast} {
	#foreach {*userList[]} {user} {#port send $userList[$user] {%0};};
};


#nop #######################################################;
#nop #######################################################;
#nop #######################################################;
#nop #######################################################;


#alias {serverinfo} {
    #map at {1} {#map get roomdata MapStampValue};
	#list userList size uls;
	#port send %0 {INFO: Welcome to the TTMap server.};
	#port send %0 {INFO: Number of active sessions: $uls.};
	#port send %0 {INFO: Map stamp = $MapStampValue};
};

#alias refresh_dynamics {
	#foreach {$drakkary[]} {drakkar} {
 		broadcast LINKB $drakkary[$drakkar][foundat] $drakkary[$drakkar][linkto] $drakkary[$drakkar][id];
    	broadcast MEXIT $drakkary[$drakkar][foundat] $drakkary[$drakkar][linkto] $drakkary[$drakkar][id] wejdz na drakkar;
	};
};
#alias unload_dynamics {
       #map at {$drakkary[demon][foundat]} {#map unlink $drakkary[demon][linkto] both};
       #map at {$drakkary[perla][foundat]} {#map unlink $drakkary[perla][linkto] both};
       #map at {$drakkary[krakken][foundat]} {#map unlink $drakkary[krakken][linkto] both};
       #map at {$drakkary[zwiastun][foundat]} {#map unlink $drakkary[zwiastun][linkto] both};
       #map at {$drakkary[wloczega][foundat]} {#map unlink $drakkary[wloczega][linkto] both};
};
#alias load_dynamics {
       #map at {$drakkary[demon][foundat]} {#map link $drakkary[demon][linkto] $drakkary[demon][id] both;};
       #map at {$drakkary[perla][foundat]} {#map link $drakkary[perla][linkto] $drakkary[perla][id] both;};
       #map at {$drakkary[krakken][foundat]} {#map link $drakkary[krakken][linkto] $drakkary[krakken][id] both;};
       #map at {$drakkary[zwiastun][foundat]} {#map link $drakkary[zwiastun][linkto] $drakkary[zwiastun][id] both;};
       #map at {$drakkary[wloczega][foundat]} {#map link $drakkary[wloczega][linkto] $drakkary[wloczega][id] both;};
};

#alias mapsave {
	unload_dynamics;
	#map at {1} {#map get roomdata vroomdata};
	#math vroomdata {$vroomdata + 1};
	#map at {1} {#map set roomdata $vroomdata};
    	#map at {1} {#map get roomdata MapStampValue};
	#map write bundles/TTMap/map.map;
	load_dynamics;
};

#nop ###################################;
#nop tworze pokoj w mapce glownej, zapisuje, wysylam komende wszystkim;
#nop ###################################;
#action {<PORT> MCREATE %d %w} {
	#map at {%1} {#map dig %2};
	broadcast MCREATE %1 %2;
    mapsave;
};

#action {<PORT> DEL %d %w} {
    #map at {%1} {#map del %2};
    broadcast DEL %1 %2;
    mapsave;
};

#action {<PORT> MEXIT %d %w %*} {
    #map goto %1;
    #map exit %2 command {%3};
#nop NEW;  #map exit %2 color <118>;
    #map move %2;
    #map get roomvnum tmproomvnum;
    #map undo;
    #map link {%3} $tmproomvnum;
    broadcast MEXIT %1 %2 $tmproomvnum %3;
    mapsave;
};

#action {<PORT> SPECIAL %d %w} {
    #line sub {variables} {
        #map at {%1} {
            #map exit %2 color <118>;
        };
    };
    broadcast SPECIAL %1 %2;
    mapsave;
};

#action {<PORT> MARK %d %w} {
    #map at {%1} {#map set roomweight $roominfo[%2][index]};
    #map at {%1} {#map set roomcolor $roominfo[%2][color]};
    #map at {%1} {#map get roomterrain rter};

    #if {"$roominfo[%2][symbol]" != ""} {
        #map at {%1} {#map set roomsymbol $roominfo[%2][symbol]};
    } {
        #map at {%1} {#map set roomsymbol;};
    };
    #if {"$roominfo[%2][command]" != ""} {
        #map at {%1} {#map set roomarea $roominfo[%2][command]};            
    };
    
    terrain_put %1 %2;
    broadcast MARK %1 %2;
    braodcast TERRAIN %1 $rter;
    mapsave;
};

#action {<PORT> HIDE %d %w} {
    #map goto %1;
    #line substitute variables {#map exitflag %2 hide on};
    #map exit %2 color <138>;
    broadcast HIDE %1 %2;
    mapsave;
};

#action {<PORT> LONG %d %w} {
    #map goto %1;
    #line substitute variables {#map insert %2 void};
    broadcast LONG %1 %2;
    mapsave;
};

#action {<PORT> SHORT %d %w} {
    #map goto %1;
    #line substitute variables {#map uninsert %2 void};
    broadcast SHORT %1 %2;
    mapsave;
};

#action {<PORT> VOID %d} {
    #map goto %1;
    #line substitute variables {#map roomflag void on};
    broadcast VOID %1;
    mapsave;
};

#action {<PORT> UNHIDE %d %w} {
    #map goto %1;
    #line substitute variables {#map exitflag %2 hide off};
    #map exit %2 color;
    broadcast UNHIDE %1 %2;
    mapsave;
};

#action {<PORT> NOTE %d %w %*} {
    #map goto %1;
    #map get roomdata vroomdata;
    #list vroomdata size vroomdatasize;

    #format timeStamp {%t} {%d%m%y %r};
    #unvar roomdatavalue;
    #var roomdatavalue[author] {%2};
    #var roomdatavalue[stamp] $timeStamp;
    #var roomdatavalue[message] {%3};
    #var roomdatavalue[type] {test};

    #if {$vroomdatasize > 0} {
        #math vr {$vroomdatasize + 1};
        #list vroomdata add {{$roomdatavalue}};
    } {
        #list vroomdata create;
        #list vroomdata add {{$roomdatavalue}};
    };
    #map set roomdata $vroomdata;
    #map set roomnote {data};

    broadcast NOTE %1 %2 %3;
    mapsave;
} {1};

#action {<PORT> BIND %d %w {F1|F2|F3} %*} {
        #map goto %1;
        #map get roomdata vroomdata;
        #list vroomdata size vroomdatasize;

        #format timeStamp {%t} {%d%m%y %r};
        #var roomdatavalue[author] %2;
        #var roomdatavalue[stamp] $timeStamp;
        #var roomdatavalue[message] {%4};
        #var roomdatavalue[type] {command};
        #var roomdatavalue[macrokey] {%3};

        #if {$vroomdatasize < 1} {
            #list vroomdata create;
            #list vroomdata add {{$roomdatavalue}};             
        } {
            #var searchforbind 0;
            #foreach {*vroomdata[]} {vr} {
                #if {"$vroomdata[$vr][type]" == "command"} {
                    #if {"$vroomdata[$vr][macrokey]" == "%3"} {
                        #var vroomdata[$vr][message] {%4};
                        #var roomdatavalue[author] %2;
                        #var roomdatavalue[stamp] $timeStamp;
                        #var searchforbind 1;
                    };
                };
            };
            #if {$searchforbind < 1} {
                #list vroomdata create;
                #list vroomdata add {{$roomdatavalue}};             
            };
        };

        #map set roomdata $vroomdata;
        #map set roomnote {data};
        broadcast BIND %1 %2 %3 %4;
        mapsave;
} {1};

#action {<PORT> ROOMSHORT %d %*} {
    #map goto %1;
    #map set roomdesc {%2};
    #map get roomsymbol vroomsymbol;
    #if {"$vroomsymbol" == "<faa>?<088>"} {
        #map set roomsymbol {};
    };
    broadcast ROOMSHORT %1 %2;
    mapsave;
};

#action {<PORT> ROOMEXITS %d %*} {
    #map goto %1;
    #map set roomname {%2};
    #map get roomcolor vroomcolor;
    #if {"$vroomcolor" == "<faa>"} {
        #map set roomcolor {};
    };
    broadcast ROOMEXITS %1 %2;
    mapsave;
};

#action {<PORT> LINKB %d %w %d} {
    #map at {%1} {
        #line substitute variables {
            #map link %2 %3 both;
        };
    };
    broadcast LINKB %1 %2 %3;
    mapsave;
} {1};

#action {<PORT> UNLINKB %d %w} {
    #map at {%1} {
        #line substitute variables {
            #map unlink %2 both;            
        };
    };
    broadcast UNLINKB %1 %2;
    mapsave;
} {1};

#action {<PORT> LINK %d %w %d} {
    #map at {%1} {
        #line substitute variables {
            #map link %2 %3;
        };
    };
    broadcast LINK %1 %2 %3;
    mapsave;
} {1};

#action {<PORT> UNLINK %d %w'} {
    #map at {%1} {
        #line substitute variables {
            #map unlink %2;         
        };
    };
    broadcast UNLINK %1 %2;
    mapsave;    
} {1};

#action {<PORT> COLOR %d %.} {
    #nop UNCOLOR THE PREVIOUS ROOM IF SET;
    #if {$beacon[%2][roomid] > 0} {
        broadcast COLOR $beacon[%2][roomid] $beacon[%2][oldsym];
    };
    #map at {%1} {#map get roomcolor tmpsymbol};
    #replace {tmpsymbol} {<} {-};
    #replace {tmpsymbol} {>} {+};
    #var beacon[%2][oldsym] {$tmpsymbol};
    #var beacon[%2][roomid] {%1};
    broadcast COLOR %1 $beacon[%2][symbol];
};

#action {<PORT> CLEAR} {
    #foreach {$beacon[]} {bebe} {
	  	#if {$beacon[$bebe][roomid] > 0} {
       	 	broadcast COLOR $beacon[$bebe][roomid] $beacon[$bebe][oldsym];
         	#var beacon[$bebe][roomid] {0};
    	};    
    };
}

#alias {refresh_beacons} {
    #foreach {$beacon[]} {bebe} {
  	#if {$beacon[$bebe][roomid] > 0} {
       	 	broadcast COLOR $beacon[$bebe][roomid] $beacon[$bebe][symbol];
    	};    
    };
}

#nop ###################################;
#nop new event, subscribers' mapevents.tin should be reloaded;
#nop ###################################;
#action {<PORT> EVENT %d %*} {
    broadcast EVENT %1 %2;
    #map at {%1} {#map set roomsymbol {<168>@<088>}};
    #map at {%1} {#map set roomarea {QB %2}};

	broadcast EVENT %1 %2;
    mapsave;
};

#action {<PORT> UNEVENT %d} {
    #rpg #map at {%1} {#map set roomsymbol};
    #rpg #map at {%1} {#map set roomarea};
    
    broadcast UNEVENT %1;
    mapsave;
} {1};

#action {<PORT> COMMAND %d %*} {
    broadcast COMMAND %1 %2;
    #map at {%1} {#map set roomsymbol {<138>E<088>}};
    #map at {%1} {#map set roomarea {%2}};

	broadcast COMMAND %1 %2;
    mapsave;
};

#action {<PORT> DRAKKAR %d %w} {
    #var tmpdrakkid {$drakkary[%2][id]};
    #var tmpfoundat {$drakkary[%2][foundat]};
    #var tmplinkto {$drakkary[%2][linkto]};

    broadcast ZNALEZIONY $tmpdrakkid $tmpfoundat (%1) $tmplinkto;
    #nop jesli dany drakar byl juz widziany;
    #nop ale gdzie indziej;
    #if {"$tmpfoundat" != "%1"} {
        #if {"$tmpfoundat" != "0"} {
    	    #nop odepnij go od mapy;
            #map at {$drakkary[%2][foundat]} {#map unlink $drakkary[%2][linkto] both};
            broadcast UNLINKB $drakkary[%2][foundat] $drakkary[%2][linkto];
            #var drakkary[%2][linkto] {0};
        };
    	#nop uaktualnij jego lokacje;
    	#var drakkary[%2][foundat] {%1};
    	#nop znajdz miejsce na cume;
   	    #map at {%1} {
       		#map get roomexits tmproomexits;
       		#map get roomvnum tmproomvnum;
    	};

    	#foreach {$kierunki[]} {kierunek} { 
        		#if {"$tmproomexits[$kierunki[$kierunek]]" == ""} {
           		 	#var drakkary[%2][linkto] {$kierunki[$kierunek]};
           		 	#map at {$drakkary[%2][foundat]} {#map link $drakkary[%2][linkto] $drakkary[%2][id] both;};
            		broadcast LINKB $drakkary[%2][foundat] $drakkary[%2][linkto] $drakkary[%2][id];
        			broadcast MEXIT $drakkary[%2][foundat] $drakkary[%2][linkto] $drakkary[%2][id] wejdz na $drakkary[%2][typ];
    			#break;
    		};
    	};
    };
} {1};


#alias terrain_put {
    #switch {"%2"} {
        #case {"forest"} {
            #math rollme {1d3};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain forest1}};
                #case {"2"} {#map at %1 {#map set roomterrain forest2}};
                #case {"3"} {#map at %1 {#map set roomterrain forest3}};
                #case {"4"} {#map at %1 {#map set roomterrain field4}};
            };
        };
        #case {"field"} {
            #math rollme {1d3};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain field1}};
                #case {"2"} {#map at %1 {#map set roomterrain field2}};
                #case {"3"} {#map at %1 {#map set roomterrain field3}};
                #case {"4"} {#map at %1 {#map set roomterrain field1}};
            };
        };
        #case {"beach"} {
            #math rollme {1d2};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain plaza1}};
                #case {"2"} {#map at %1 {#map set roomterrain plaza2}};
                #case {"3"} {#map at %1 {#map set roomterrain field1}};
                #case {"4"} {#map at %1 {#map set roomterrain field1}};
            };
        };
        #case {"river"} {
            #math rollme {1d2};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain water1}};
                #case {"2"} {#map at %1 {#map set roomterrain water2}};
                #case {"3"} {#map at %1 {#map set roomterrain field1}};
                #case {"4"} {#map at %1 {#map set roomterrain field1}};
            };
        };
        #case {"lake"}  {
            #math rollme {1d2};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain water1}};
                #case {"2"} {#map at %1 {#map set roomterrain water2}};
                #case {"3"} {#map at %1 {#map set roomterrain field1}};
                #case {"4"} {#map at %1 {#map set roomterrain field1}};
            };
        };

        #case {"bush"} {
            #math rollme {1d2};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain field3}};
                #case {"2"} {#map at %1 {#map set roomterrain field4}};
                #case {"3"} {#map at %1 {#map set roomterrain field1}};
                #case {"4"} {#map at %1 {#map set roomterrain field1}};
            };
        };
    #nop BAGNA;
        #case {"swamp"} {
            #math rollme {1d6};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain cave1}};
                #case {"2"} {#map at %1 {#map set roomterrain cave2}};
                #case {"3"} {#map at %1 {#map set roomterrain cave3}};
                #case {"4"} {#map at %1 {#map set roomterrain cave4}};
                #case {"5"} {#map at %1 {#map set roomterrain cave5}};
                #case {"6"} {#map at %1 {#map set roomterrain cave6}};
            };
        };
    #nop LAWA!;
        #case {"lava"} {
            #math rollme {1d3};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain lava1}};
                #case {"2"} {#map at %1 {#map set roomterrain lava2}};
                #case {"3"} {#map at %1 {#map set roomterrain lava3}};
                #case {"4"} {#map at %1 {#map set roomterrain lava4}};
            };
        };
    #nop GORY;
        #case {"mountain"} {
            #math rollme {1d2};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain mount1}};
                #case {"2"} {#map at %1 {#map set roomterrain mount2}};
            };
        };
    #nop PUSTYNIE;
        #case {"desert"} {
            #math rollme {1d4};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain field1}};
                #case {"2"} {#map at %1 {#map set roomterrain field1}};
                #case {"3"} {#map at %1 {#map set roomterrain field1}};
                #case {"4"} {#map at %1 {#map set roomterrain field1}};
            };
        };
    #nop TRAKT;
        #case {"road"} {
            #math rollme {1d3};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain road}};
                #case {"1"} {#map at %1 {#map set roomterrain path1}};
                #case {"2"} {#map at %1 {#map set roomterrain path2}};
            };
        };
        #case {"graveyard"} {
            #math rollme {1d2};
            #switch {"$rollme"} {
                #case {"1"} {#map at %1 {#map set roomterrain grave1}};
                #case {"2"} {#map at %1 {#map set roomterrain grave2}};
            };
        };
    };
};


